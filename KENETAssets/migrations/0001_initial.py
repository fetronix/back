# Generated by Django 5.1.1 on 2025-01-24 06:22

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_received', models.DateField(auto_now_add=True)),
                ('asset_description', models.TextField()),
                ('asset_description_model', models.CharField(blank=True, max_length=100, null=True)),
                ('serial_number', models.CharField(max_length=100, unique=True)),
                ('kenet_tag', models.CharField(max_length=100, unique=True)),
                ('sent_to_erp', models.BooleanField(default=False)),
                ('asset_id', models.CharField(blank=True, editable=False, max_length=10, unique=True)),
                ('status', models.CharField(blank=True, choices=[('instore', 'In Store'), ('faulty', 'Faulty'), ('onsite', 'On Site'), ('decommissioned', 'Decommissioned'), ('pending_release', 'Pending Release'), ('pending_approval', 'Pending Approval '), ('approved', 'Approved by Admin '), ('rejected', 'Denied by Admin ')], default='instore', max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('date_delivered', models.DateField(auto_now_add=True)),
                ('invoice_file', models.FileField(blank=True, null=True, upload_to='invoices/')),
                ('invoice_number', models.CharField(blank=True, max_length=100, null=True)),
                ('project', models.CharField(blank=True, choices=[('noc', 'NOC'), ('netdev', 'NetDev'), ('bolt', 'BOLT'), ('dci', 'DCI'), ('data_centre_infrastructure', 'Data Centre Infrastructure')], default='noc', max_length=100, null=True)),
                ('comments', models.TextField(blank=True)),
                ('delivery_id', models.CharField(blank=True, editable=False, max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Received Consignment',
                'verbose_name_plural': 'Received Consignments',
            },
        ),
        migrations.CreateModel(
            name='FibreInfrastructures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Search_Description', models.CharField(max_length=255)),
                ('Acquisition_Date', models.DateTimeField(auto_now_add=True)),
                ('start_location', models.CharField(max_length=255, verbose_name='Start Location')),
                ('intermediary_locations', models.TextField(blank=True, help_text='Comma-separated list of intermediary locations.', null=True, verbose_name='Intermediary Locations')),
                ('destination_location', models.CharField(max_length=255, verbose_name='Destination Location')),
                ('location_code', models.CharField(editable=False, max_length=10, unique=True, verbose_name='Fibre Location Code')),
            ],
            options={
                'verbose_name': 'Fibre Infrastructure',
                'verbose_name_plural': 'Fibre Infrastructures',
                'ordering': ['location_code'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('name_alias', models.CharField(max_length=100, unique=True)),
                ('location_code', models.CharField(blank=True, editable=False, max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
            },
        ),
        migrations.CreateModel(
            name='SavedPDF',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pdf_file', models.FileField(upload_to='pdfs/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Suppliers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
            },
        ),
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='KENETAssets.assets')),
            ],
            options={
                'verbose_name': 'Dispatch Basket',
                'verbose_name_plural': 'Dispatch Baskets',
            },
        ),
        migrations.AddField(
            model_name='assets',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='KENETAssets.category'),
        ),
        migrations.AddField(
            model_name='assets',
            name='delivery',
            field=models.ForeignKey(blank=True, help_text='Associated delivery for this asset', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assets', to='KENETAssets.delivery'),
        ),
        migrations.AddField(
            model_name='assets',
            name='destination_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='going_location', to='KENETAssets.location'),
        ),
        migrations.AddField(
            model_name='assets',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_location', to='KENETAssets.location'),
        ),
        migrations.AddField(
            model_name='delivery',
            name='supplier_name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_suppliers', to='KENETAssets.suppliers'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('can_view', 'Can View'), ('can_checkout_items', 'Can Checkout Items')], default='can_view', max_length=50)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='delivery',
            name='person_receiving',
            field=models.ForeignKey(blank=True, help_text='User who received the asset', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('checkout_date', models.DateTimeField(auto_now_add=True)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('signature_image', models.ImageField(blank=True, null=True, upload_to='signatures/')),
                ('user_signature_image', models.ImageField(blank=True, null=True, upload_to='signatures/users/')),
                ('quantity_required', models.PositiveIntegerField(default=1)),
                ('quantity_issued', models.PositiveIntegerField(default=1)),
                ('checkout_url_link', models.URLField(blank=True, help_text='Optional URL for checkout link', null=True)),
                ('pdf_file', models.FileField(blank=True, null=True, upload_to='release_forms/')),
                ('cart_items', models.ManyToManyField(related_name='checkouts', to='KENETAssets.cart')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('verifier_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='verifier_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dispatch List',
                'verbose_name_plural': 'Dispatch Lists',
                'ordering': ['-checkout_date'],
            },
        ),
        migrations.AddField(
            model_name='cart',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AssetsMovement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, help_text='Date when the movement was recorded')),
                ('comments', models.TextField(blank=True, help_text='Additional details about the movement', null=True)),
                ('asset_description', models.TextField(blank=True, help_text='Additional details about the asset', null=True)),
                ('asset_description_model', models.TextField(blank=True, help_text='Additional details about the asset', null=True)),
                ('serial_number', models.CharField(blank=True, help_text='The serial number of the asset', max_length=100, null=True)),
                ('kenet_tag', models.CharField(blank=True, help_text='The KENET tag number of the asset', max_length=100, null=True)),
                ('status', models.CharField(blank=True, help_text='Current status of the asset during the movement', max_length=120, null=True)),
                ('location', models.CharField(blank=True, help_text='Current location of the asset', max_length=200, null=True)),
                ('new_location', models.CharField(blank=True, help_text='New location of the asset after movement', max_length=200, null=True)),
                ('sent_to_erp', models.BooleanField(default=False)),
                ('assets', models.ForeignKey(help_text='Asset being moved', on_delete=django.db.models.deletion.CASCADE, related_name='movements', to='KENETAssets.assets')),
                ('person_moving', models.ForeignKey(blank=True, help_text='Person responsible for moving the asset', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Asset Movement',
                'verbose_name_plural': 'Asset Movements',
                'ordering': ['-date_created'],
            },
        ),
        migrations.AddField(
            model_name='assets',
            name='person_receiving',
            field=models.ForeignKey(blank=True, help_text='User who received the asset', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='cart',
            unique_together={('user', 'asset')},
        ),
    ]
